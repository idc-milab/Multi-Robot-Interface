{"version":3,"sources":["components/RobotObject.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RobotObject","butterClient","onRemove","useState","animations","setAnimations","useEffect","loadAnimations","a","setTimeout","getAvailableAnimations","res","status","console","error","data","Result","match","replace","split","log","Container","className","Card","Header","style","display","alignItems","marginBottom","ip","Button","type","variant","aria-hidden","onClick","marginLeft","Body","key","length","map","animation","playAnimation","trim","playAnimationByName","App","state","dayNightStatus","currentIPInput","currentButterClients","show","labCurrentIPs","SetDayNightStatus","setState","setIPValue","onAddRobotObject","currentButterClient","HttpClient","timeout","c","some","onRemoveRobotObject","filter","onToggleInstructions","renderRobotObjects","this","Navbar","bg","Brand","href","collapseOnSelect","expand","Toggle","aria-controls","Form","inline","FormControl","as","placeholder","value","onChange","e","target","Collapse","id","Nav","document","body","classList","toggle","Modal","onHide","translate","closeButton","Title","Footer","React","PureComponent","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.8d6a8556.chunk.js","sourcesContent":["import React, { Component, useEffect, useState } from 'react'\nimport { HttpClient } from '@butter-robotics/mas-javascript-api';\nimport { Navbar, Nav, Form, FormControl, Button, Container, ButtonGroup, Card } from 'react-bootstrap';\n\n\nexport function RobotObject({ butterClient, onRemove }: { butterClient: HttpClient, onRemove: (ip: string) => void }) {\n\n  const [animations, setAnimations] = useState<string[]>([]);\n\n  useEffect(() => {\n    loadAnimations();\n  }, []);\n\n  const loadAnimations = async () => {\n    setTimeout(() => {\n    }, 5000)\n    const res = await butterClient.getAvailableAnimations();\n    if (res.status !== 200) {\n      console.error('Failed to get robot animations', res);\n      return;\n    }\n    const animations = res.data.Result.match(/\\[.*\\]/ig)[0].replace('[', '').replace(']', '').replace(/\\\\s+/, '').split(',');\n    console.log(animations);\n    setAnimations(animations);\n  }\n\n  const playAnimationByName = (animation: string) => {\n    butterClient.playAnimation(animation.trim());\n  }\n\n  return (\n    <Container className='robot-card'>\n      <Card >\n        <Card.Header>\n          <div style={{ display: 'flex', alignItems: 'center' }}>\n            <p style={{ marginBottom: 0 }}>{butterClient.ip}</p>\n            <Button type=\"button\"  className='remove btn' variant=\"outline-danger\" aria-hidden=\"true\" onClick={() => onRemove(butterClient.ip)} style={{ marginLeft: 'auto' }}> \n            ðŸ—‘ðŸ¤®\n            </Button>\n          </div>\n        </Card.Header>\n        <Card.Body>\n          <div key={butterClient.ip} className='robot-object'>\n            {animations.length === 0 ? 'There was a problem connecting to the robot.. please try again..' : animations.map(animation => (\n              <Button variant='secondary' className='animation-button' key={animation} onClick={() => playAnimationByName(animation)}>{animation}</Button>\n            ))}\n\n          </div>\n        </Card.Body>\n      </Card>\n\n\n\n    </Container>\n  );\n}\n\n","import React from 'react';\nimport './App.scss';\nimport { HttpClient } from '@butter-robotics/mas-javascript-api';\nimport { RobotObject } from './components/RobotObject';\nimport { useState } from 'react';\nimport { Navbar, Nav, Form, FormControl, Button, Container, Modal, ModalBody } from 'react-bootstrap';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\n\n\nexport type AppState = {\n\tdayNightStatus: boolean;\n\tcurrentIPInput: string;\n\tcurrentButterClients: HttpClient[];\n\tshow: boolean;\n\tlabCurrentIPs: string[];\n}\n\nexport class App extends React.PureComponent<{}, AppState> {\n\n\n\n\tstate: AppState = {\n\t\tdayNightStatus: false,\n\t\tcurrentIPInput: '192.168.57.30',\n\t\tcurrentButterClients: [],\n\t\tshow: false,\n\t\tlabCurrentIPs: ['192.168.57.30', '192.168.57.32', '192.168.57.34', '192.168.56.188', '192.168.56.193', '192.168.56.206'],\n\t}\n\n\tSetDayNightStatus = () => {\n\t\tthis.setState({\n\t\t\tdayNightStatus: !this.state.dayNightStatus\n\t\t})\n\t}\n\n\n\tsetIPValue = (ip: string) => {\n\t\tthis.setState({\n\t\t\tcurrentIPInput: ip\n\t\t})\n\t}\n\n\tonAddRobotObject = (ip: string) => {\n\t\tconst currentButterClient = new HttpClient(ip);\n\t\tcurrentButterClient.timeout = 120;\n\t\tif (!this.state.currentButterClients.map(c => c.ip).some(c => c === ip)) {\n\t\t\tthis.setState({\n\t\t\t\tcurrentButterClients: [...this.state.currentButterClients, currentButterClient]\n\t\t\t})\n\t\t}\n\t}\n\n\tonRemoveRobotObject = (ip: string) => {\n\t\tthis.setState({\n\t\t\tcurrentButterClients: this.state.currentButterClients.filter(butterClient => butterClient.ip !== ip)\n\t\t})\n\t}\n\n\tonToggleInstructions = () => {\n\t\tthis.setState({\n\t\t\tshow: !this.state.show\n\t\t})\n\t}\n\n\n\trenderRobotObjects = () => {\n\n\t\treturn (\n\t\t\t<ul className='robot-objects'>\n\t\t\t\t{this.state.currentButterClients.map((butterClient) => <RobotObject key={butterClient.ip} butterClient={butterClient} onRemove={this.onRemoveRobotObject} />)}\n\t\t\t</ul>\n\t\t);\n\t}\n\n\trender() {\n\n\t\tconst { currentButterClients } = this.state;\n\t\tconst handleClose = () => this.state.show = false;\n\t\tconst handleShow = () => this.state.show = true;\n\n\n\t\treturn (\n\t\t\t<div>\n\t\t\t\t\t<Navbar bg=\"dark\" variant=\"dark\">\n\t\t\t\t\t\t<Navbar.Brand href=\"#home\">Multi Robot Operator</Navbar.Brand>\n\t\t\t\t\t</Navbar>\n\n\t\t\t\t\t<Navbar collapseOnSelect expand=\"lg\" className='robot-search navbar-collapse' bg=\"dark\" variant=\"dark\">\n\t\t\t\t\t<Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\n\t\t\t\t\t\n\t\t\t\t\t\t<Form inline>\n\t\t\t\t\t\t<FormControl as=\"select\" type=\"IPInput\" placeholder=\"insert IP\" className=\"mr-sm-2\" value={this.state.currentIPInput} onChange={(e) => this.setIPValue(e.target.value)}>\n\t\t\t\t\t\t{this.state.labCurrentIPs.map(ip => (<option>{ip}</option>))}\n\t\t\t\t\t\t</FormControl>\n\n\t\t\t\t\t\t<Button variant=\"outline-info\" onClick={() => this.onAddRobotObject(this.state.currentIPInput)}>Connect to Robot</Button>\n\t\t\t\t\t\t</Form>\n\t\t\t\t\t\t<Navbar.Collapse id=\"responsive-navbar-nav\">\n\t\t\t\t\t\t<Nav className=\"ml-auto\" >\n\t\t\t\t\t\t\t<Button variant=\"secondary\" onClick={this.onToggleInstructions}>Instructions</Button>\n\t\t\t\t\t\t\t<Button className=\"mx-2\" onClick={() => { document.body.classList.toggle('background-night'); this.SetDayNightStatus() }} variant=\"outline-info\">{this.state.dayNightStatus ? 'Bright' : 'Dark'}</Button>\n\t\t\t\t\t\t\t\n\t\t\t\t\t\t\t<Modal show={this.state.show} onHide={!this.state.show}>\n\t\t\t\t\t\t\t<Modal.Header translate=\"true\" closeButton>\n\t\t\t\t\t\t\t\t<Modal.Title>Manual for the \"Robot-Operator\"</Modal.Title>\n\t\t\t\t\t\t\t</Modal.Header>\n\t\t\t\t\t\t\t<Modal.Body>\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t1. Make sure that your robot in connected to a ButterComposer on some laptop around the lab\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t2. Make sure that this computer is connected to milab_idc wifi network (password: milabspirit)\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t<p>\n\t\t\t\t\t\t\t\t3. Try to remove and then add the robot card from the screen if there are no available animations buttons apeering on screen\n\t\t\t\t\t\t\t\t</p>\n\t\t\t\t\t\t\t\t4. Pray for some luck...\n\n\t\t\t\t\t\t\t</Modal.Body>\n\t\t\t\t\t\t\t<Modal.Footer>\n\t\t\t\t\t\t\t\t<Button variant=\"secondary\" onClick={this.onToggleInstructions}>\n\t\t\t\t\t\t\t\tI'm ready! go back\n\t\t\t\t\t\t\t\t</Button>\n\n\t\t\t\t\t\t\t</Modal.Footer>\n\t\t\t\t\t\t\t</Modal>\n\t\t\t\t\t\t</Nav>\n\t\t\t\t\t\t</Navbar.Collapse>\n\t\t\t\t\t</Navbar>\n\n\t\t\t\t\t{currentButterClients !== [] ? this.renderRobotObjects() : <h2>loading..</h2>}\n\n\t\t\t</div>\n\t\t)\n\t}\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}