{"version":3,"sources":["components/RobotObject.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RobotObject","butterClient","onRemove","useState","animations","setAnimations","useEffect","loadAnimations","a","setTimeout","getAvailableAnimations","res","status","console","error","data","Result","match","replace","split","key","ip","className","onClick","length","map","animation","playAnimation","playAnimationByName","App","state","dayNightStatus","currentIPInput","currentButterClients","SetDayNightStatus","setState","setIPValue","onAddRobotObject","currentButterClient","HttpClient","includes","onRemoveRobotObject","filter","renderRobotObjects","this","document","body","classList","toggle","type","placeholder","value","onChange","e","target","React","PureComponent","Boolean","window","location","hostname","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qVAGO,SAASA,EAAT,GAAmH,IAA3FC,EAA0F,EAA1FA,aAAcC,EAA4E,EAA5EA,SAA4E,EAEnFC,mBAAmB,IAFgE,mBAEhHC,EAFgH,KAEpGC,EAFoG,KAIvHC,qBAAU,WACRC,MACC,IAEH,IAAMA,EAAc,uCAAG,8BAAAC,EAAA,6DACrBC,YAAW,cACR,KAFkB,SAGHR,EAAaS,yBAHV,UAIF,OADbC,EAHe,QAIbC,OAJa,uBAKnBC,QAAQC,MAAM,iCAAkCH,GAL7B,0BAQfP,EAAaO,EAAII,KAAKC,OAAOC,MAAM,YAAY,GAAGC,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAAIA,QAAQ,IAAK,IAAIC,MAAM,KACjHd,EAAcD,GATO,2CAAH,qDAgBpB,OACE,6BACE,yBAAKgB,IAAKnB,EAAaoB,GAAIC,UAAU,gBACrC,6BACE,4BAAQC,QAAS,kBAAMrB,EAASD,EAAaoB,MAA7C,WAEuB,IAAtBjB,EAAWoB,OAAe,aAAepB,EAAWqB,KAAI,SAAAC,GAAS,OAChE,4BAAQN,IAAKM,EAAWH,QAAS,kBAXb,SAACG,GAC3BzB,EAAa0B,cAAcD,GAUgBE,CAAoBF,KAAaA,QCrBzE,IAyEQG,EAzEf,4MAICC,MAAkB,CACjBC,gBAAgB,EAChBC,eAAgB,GAChBC,qBAAsB,IAPxB,EAUCC,kBAAoB,WACnB,EAAKC,SAAS,CACbJ,gBAAiB,EAAKD,MAAMC,kBAZ/B,EAiBCK,WAAa,SAACf,GACb,EAAKc,SAAS,CACbH,eAAgBX,KAnBnB,EAuBCgB,iBAAmB,SAAChB,GACnB,IAAMiB,EAAsB,IAAIC,aAAWlB,GACtC,EAAKS,MAAMG,qBAAqBO,SAASF,IAC7C,EAAKH,SAAS,CACbF,qBAAqB,GAAD,mBAAM,EAAKH,MAAMG,sBAAjB,CAAuCK,OA3B/D,EAgCCG,oBAAsB,SAACpB,GACtB,EAAKc,SAAS,CACbF,qBAAsB,EAAKH,MAAMG,qBAAqBS,QAAO,SAAAzC,GAAY,OAAIA,EAAaoB,KAAOA,QAlCpG,EAsCCsB,mBAAqB,WAErB,OACC,wBAAIrB,UAAU,iBACZ,EAAKQ,MAAMG,qBAAqBR,KAAI,SAACxB,GAAD,OAAkB,kBAACD,EAAD,CAAaoB,IAAKnB,EAAaoB,GAAIpB,aAAcA,EAAcC,SAAU,EAAKuC,2BA1CxI,4CAkDC,WAAU,IAAD,OAEAR,EAAyBW,KAAKd,MAA9BG,qBAER,OAEC,8BACC,0BAAMX,UAAU,kBACf,4BAAQC,QAAS,WAAQsB,SAASC,KAAKC,UAAUC,OAAO,oBAAqB,EAAKd,sBAAlF,IAA2GU,KAAKd,MAAMC,eAAiB,SAAW,SAGnJ,2CACA,6BACC,2BAAOkB,KAAK,UAAUC,YAAY,YAAYC,MAAOP,KAAKd,MAAME,eAAgBoB,SAAU,SAACC,GAAD,OAAO,EAAKjB,WAAWiB,EAAEC,OAAOH,UAC1H,4BAAQ5B,QAAS,kBAAM,EAAKc,iBAAiB,EAAKP,MAAME,kBAAxD,YAEAC,IAAyB,GAAKW,KAAKD,qBAAuB,8CAlE/D,GAAyBY,IAAMC,eCDXC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAAS3C,MACvB,2DCZN4C,IAASC,OAAO,kBAAC,EAAD,MAASjB,SAASkB,eAAe,SDmI3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.1a41b617.chunk.js","sourcesContent":["import React, { Component, useEffect, useState } from 'react'\r\nimport { HttpClient } from '@butter-robotics/mas-javascript-api';\r\n\r\nexport function RobotObject( { butterClient, onRemove }:  { butterClient: HttpClient, onRemove: (ip: string) => void } ) {\r\n\r\n  const [animations, setAnimations] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    loadAnimations();\r\n  }, []);\r\n\r\n  const loadAnimations = async () => {\r\n    setTimeout(() => {\r\n    }, 5000)\r\n    const res = await butterClient.getAvailableAnimations();\r\n    if (res.status !== 200) {\r\n      console.error('Failed to get robot animations', res);\r\n      return;\r\n    }\r\n    const animations = res.data.Result.match(/\\[.*\\]/ig)[0].replace('[', '').replace(']', '').replace(' ', '').split(',');\r\n    setAnimations(animations);\r\n}\r\n\r\n  const playAnimationByName = (animation: string) => {\r\n    butterClient.playAnimation(animation);\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <div key={butterClient.ip} className='robot-object'>\r\n      <div>\r\n        <button onClick={() => onRemove(butterClient.ip)}>remove</button>\r\n      </div>\r\n        {animations.length === 0 ? 'loading...' : animations.map(animation => (\r\n          <button key={animation} onClick={()=>playAnimationByName(animation)}>{animation}</button>\r\n        ))}\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport { HttpClient } from '@butter-robotics/mas-javascript-api';\r\nimport { RobotObject }  from './components/RobotObject'\r\nimport { useState } from 'react';\r\n\r\n\r\nexport type AppState = {\r\n\tdayNightStatus: boolean;\r\n\tcurrentIPInput: string;\r\n\tcurrentButterClients: HttpClient[];\r\n}\r\n\r\nexport class App extends React.PureComponent<{}, AppState> {\r\n\r\n\r\n\r\n\tstate: AppState = {\r\n\t\tdayNightStatus: false,\r\n\t\tcurrentIPInput: '',\r\n\t\tcurrentButterClients: [],\r\n\t}\t\r\n\r\n\tSetDayNightStatus = () => {\r\n\t\tthis.setState({\r\n\t\t\tdayNightStatus: !this.state.dayNightStatus\r\n\t\t})\r\n\t}\r\n\r\n\r\n\tsetIPValue = (ip: string) => {\r\n\t\tthis.setState({\r\n\t\t\tcurrentIPInput: ip\r\n\t\t})\r\n\t}\r\n\r\n\tonAddRobotObject = (ip: string) => {\r\n\t\tconst currentButterClient = new HttpClient(ip);\r\n\t\tif (!this.state.currentButterClients.includes(currentButterClient)) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrentButterClients: [...this.state.currentButterClients, currentButterClient]\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tonRemoveRobotObject = (ip: string) => {\r\n\t\tthis.setState({\r\n\t\t\tcurrentButterClients: this.state.currentButterClients.filter(butterClient => butterClient.ip !== ip)\r\n\t\t})\r\n\t}\r\n\t\r\n\trenderRobotObjects = () => {\r\n\t\t\r\n\treturn (\r\n\t\t<ul className='robot-objects'>\r\n\t\t\t{this.state.currentButterClients.map((butterClient) => <RobotObject key={butterClient.ip} butterClient={butterClient} onRemove={this.onRemoveRobotObject} />)}\r\n\t\t</ul>\r\n\t);\r\n\r\n\r\n\t}\r\n\r\n\r\n\trender() {\r\n\r\n\t\tconst { currentButterClients } = this.state;\r\n\r\n\t\treturn (\r\n\r\n\t\t\t<main>\r\n\t\t\t\t<span className='top-font-sizes'>\r\n\t\t\t\t\t<button onClick={() => { document.body.classList.toggle('background-night'); this.SetDayNightStatus() }}> {this.state.dayNightStatus ? 'Bright' : 'Dark'}</button>\r\n\t\t\t\t</span>\r\n\r\n\t\t\t\t<h1>Robots List</h1>\r\n\t\t\t\t<div>\r\n\t\t\t\t\t<input type=\"IPInput\" placeholder=\"insert IP\" value={this.state.currentIPInput} onChange={(e) => this.setIPValue(e.target.value)}/>\r\n\t\t\t\t\t<button onClick={() => this.onAddRobotObject(this.state.currentIPInput)}>connect</button>\r\n\t\t\t\t</div>\r\n\t\t\t\t{currentButterClients !== [] ? this.renderRobotObjects() : <h2>Loading..</h2>}\r\n\r\n\t\t\t</main>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}