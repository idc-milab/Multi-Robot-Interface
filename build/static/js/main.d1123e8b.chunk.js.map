{"version":3,"sources":["components/RobotObject.tsx","components/ScenariosButtons.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["RobotObject","butterClient","onRemove","useState","animations","setAnimations","useEffect","loadAnimations","a","setTimeout","getAvailableAnimations","res","status","console","error","data","response","replace","split","log","Container","className","Card","Header","style","display","alignItems","marginBottom","ip","Button","type","variant","aria-hidden","onClick","marginLeft","Body","key","length","map","animation","playAnimation","trim","playAnimationByName","kip1","HttpClient","kip2","timeout","scenarios","Map","start","breathFull","fullToHalf","stopAnimation","clearAnimation","breathHalf","halfToFull","stopFull","stopHalf","ScenarioButtons","scenario","get","App","state","dayNightStatus","NewIPInput","currentButterClients","showInst","showNewIP","labCurrentIPs","IPdeleteState","Array","fill","SetDayNightStatus","setState","onAddRobotObject","currentButterClient","c","some","onRemoveRobotObject","filter","onRemoveRobotIP","array","StateArray","index","indexOf","splice","onToggleInstructions","onToggleIPadd","NewIpADDED","result","test","alert","handleChange","event","target","value","handlePress","renderRobotObjects","IParray","this","disabled","basename","Navbar","bg","Brand","href","Nav","Link","color","NavDropdown","title","id","Item","to","Divider","collapseOnSelect","expand","Toggle","aria-controls","Form","inline","Modal","show","onHide","translate","Title","ListGroup","ButtonGroup","aria-label","renderButtons","InputGroup","FormControl","placeholder","aria-describedby","onChange","onKeyPress","Footer","Collapse","document","body","classList","toggle","path","React","PureComponent","Boolean","window","location","hostname","match","ReactDOM","render","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.d1123e8b.chunk.js","sourcesContent":["import React, { Component, useEffect, useState } from 'react'\r\nimport { HttpClient } from '@butter-robotics/mas-javascript-api';\r\nimport { Navbar, Nav, Form, FormControl, Button, Container, ButtonGroup, Card } from 'react-bootstrap';\r\n\r\n\r\nexport function RobotObject({ butterClient, onRemove }: { butterClient: HttpClient, onRemove: (ip: string) => void }) {\r\n\r\n  const [animations, setAnimations] = useState<string[]>([]);\r\n\r\n  useEffect(() => {\r\n    loadAnimations();\r\n  }, []);\r\n\r\n  const loadAnimations = async () => {\r\n    setTimeout(() => {\r\n    }, 5000)\r\n    const res = await butterClient.getAvailableAnimations();\r\n    if (res.status !== 200) {\r\n      console.error('Failed to get robot animations', res);\r\n      return;\r\n    }\r\n    const animations = res.data.response.data.replace('[', '').replace(']', '').replace(/\\\\s+/, '').split(',');\r\n    console.log(animations);\r\n    setAnimations(animations);\r\n  }\r\n\r\n  const playAnimationByName = (animation: string) => {\r\n    butterClient.playAnimation(animation.trim());\r\n  }\r\n\r\n  return (\r\n    <Container className='robot-card'>\r\n      <Card >\r\n        <Card.Header>\r\n          <div style={{ display: 'flex', alignItems: 'center' }}>\r\n            <p style={{ marginBottom: 0 }}>{butterClient.ip}</p>\r\n            <Button type=\"button\"  className='remove btn' variant=\"outline-danger\" aria-hidden=\"true\" onClick={() => onRemove(butterClient.ip)} style={{ marginLeft: 'auto' }}> \r\n            🗑\r\n            </Button>\r\n          </div>\r\n        </Card.Header>\r\n        <Card.Body>\r\n          <div key={butterClient.ip} className='robot-object'>\r\n            {animations.length === 0 ? 'There was a problem connecting to the robot.. please try again..' : animations.map(animation => (\r\n              <Button variant='secondary' className='animation-button' key={animation} onClick={() => playAnimationByName(animation)}>{animation}</Button>\r\n            ))}\r\n\r\n          </div>\r\n        </Card.Body>\r\n      </Card>\r\n    </Container>\r\n  );\r\n}\r\n\r\n","import React from 'react';\r\nimport { Button, Container, Card } from 'react-bootstrap';\r\nimport { HttpClient } from '@butter-robotics/mas-javascript-api';\r\n\r\nconst kip1 = new HttpClient('192.168.57.30');\r\nconst kip2 = new HttpClient('192.168.56.188');\r\n\r\nkip1.timeout = 240;\r\nkip2.timeout = 240;\r\n\r\n\r\nlet interval1: NodeJS.Timeout;\r\nlet interval2: NodeJS.Timeout;\r\n\r\nconst scenarios: Map<string, any> = new Map<string, any>([\r\n    ['In-Group', {\r\n        start: () => {\r\n            kip1.playAnimation('kip_45_Full')\r\n            kip2.playAnimation('kip_45_Full')\r\n        },\r\n\r\n        breathFull: () => {\r\n            kip1.playAnimation('kip_Full_Breath', true)\r\n            kip2.playAnimation('kip_Full_Breath', true)\r\n        },  \r\n\r\n        fullToHalf: () => {\r\n            kip1.stopAnimation();\r\n            kip2.stopAnimation();\r\n\r\n            kip1.clearAnimation();\r\n            kip2.clearAnimation();\r\n\r\n            setTimeout(() => {\r\n                kip1.playAnimation('kip_FullToHalf', true)\r\n            }, 500);\r\n            setTimeout(() => {\r\n                kip2.playAnimation('kip_FullToHalf', true)\r\n            }, 500);\r\n        },\r\n\r\n        breathHalf: () => {\r\n            kip1.playAnimation('kip_Half_Breath')\r\n            kip2.playAnimation('kip_Half_Breath')\r\n        },\r\n\r\n        halfToFull: () => {\r\n            kip1.stopAnimation();\r\n            kip2.stopAnimation();\r\n\r\n            kip1.clearAnimation();\r\n            kip2.clearAnimation();\r\n\r\n            setTimeout(() => {\r\n                kip1.playAnimation('kip_HalfToFull', true)\r\n            }, 500);\r\n            setTimeout(() => {\r\n                kip2.playAnimation('kip_HalfToFull', true)\r\n            }, 500);\r\n        },\r\n\r\n        stopFull: () => {\r\n            kip1.stopAnimation();\r\n            kip2.stopAnimation();\r\n\r\n            kip1.clearAnimation();\r\n            kip2.clearAnimation();\r\n\r\n            setTimeout(() => {\r\n                kip1.playAnimation('kip_45_FullStop', true)\r\n            }, 500);\r\n            setTimeout(() => {\r\n                kip2.playAnimation('kip_45_FullStop', true)\r\n            }, 500);\r\n        },\r\n\r\n        stopHalf: () => {\r\n            kip1.stopAnimation();\r\n            kip2.stopAnimation();\r\n\r\n            kip1.clearAnimation();\r\n            kip2.clearAnimation();\r\n\r\n            setTimeout(() => {\r\n                kip1.playAnimation('kip_45_HalfStop', true)\r\n            }, 500);\r\n            setTimeout(() => {\r\n                kip2.playAnimation('kip_45_HalfStop', true)\r\n            }, 500);\r\n        },\r\n        \r\n    }],\r\n\r\n    ['Out-Group', {\r\n        start: () => {\r\n            kip1.playAnimation('kip_45_Full')\r\n            kip2.playAnimation('kip_72_Full')\r\n        },\r\n\r\n        breathFull: () => {\r\n            kip1.playAnimation('kip_Full_Breath', true)\r\n            kip2.playAnimation('kip_Full_Breath', true)\r\n        },  \r\n\r\n        fullToHalf: () => {\r\n            kip1.stopAnimation();\r\n            kip2.stopAnimation();\r\n\r\n            kip1.clearAnimation();\r\n            kip2.clearAnimation();\r\n\r\n            setTimeout(() => {\r\n                kip1.playAnimation('kip_FullToHalf', true)\r\n            }, 500);\r\n            setTimeout(() => {\r\n                kip2.playAnimation('kip_FullToHalf', true)\r\n            }, 500);\r\n        },\r\n\r\n        breathHalf: () => {\r\n            kip1.playAnimation('kip_Half_Breath')\r\n            kip2.playAnimation('kip_Half_Breath')\r\n        },\r\n\r\n        halfToFull: () => {\r\n            kip1.stopAnimation();\r\n            kip2.stopAnimation();\r\n\r\n            kip1.clearAnimation();\r\n            kip2.clearAnimation();\r\n\r\n            setTimeout(() => {\r\n                kip1.playAnimation('kip_HalfToFull', true)\r\n            }, 500);\r\n            setTimeout(() => {\r\n                kip2.playAnimation('kip_HalfToFull', true)\r\n            }, 500);\r\n        },\r\n\r\n        stopFull: () => {\r\n            kip1.stopAnimation();\r\n            kip2.stopAnimation();\r\n\r\n            kip1.clearAnimation();\r\n            kip2.clearAnimation();\r\n\r\n            setTimeout(() => {\r\n                kip1.playAnimation('kip_45_FullStop', true)\r\n            }, 500);\r\n            setTimeout(() => {\r\n                kip2.playAnimation('kip_70_FullStop', true)\r\n            }, 500);\r\n        },\r\n\r\n        stopHalf: () => {\r\n            kip1.stopAnimation();\r\n            kip2.stopAnimation();\r\n\r\n            kip1.clearAnimation();\r\n            kip2.clearAnimation();\r\n\r\n            setTimeout(() => {\r\n                kip1.playAnimation('kip_45_HalfStop', true)\r\n            }, 500);\r\n            setTimeout(() => {\r\n                kip2.playAnimation('kip_70_HalfStop', true)\r\n            }, 500);\r\n        },\r\n    }],\r\n]);\r\n\r\nexport const ScenarioButtons = ({ scenario } : { scenario: string }) => {\r\n\r\n    const { start, breathFull, fullToHalf, breathHalf, halfToFull, stopFull, stopHalf } = scenarios.get(scenario);\r\n    return <div>\r\n    <Container className='scenario-component'>\r\n      <Card>\r\n        <Card.Header>\r\n            {scenario}\r\n        </Card.Header>\r\n        <Card.Body>\r\n            <Button onClick={start} variant=\"success\">Start</Button>\r\n            <Button onClick={breathFull} variant=\"warning\">Breath Full</Button>\r\n            <Button onClick={fullToHalf} variant=\"warning\">Full To Half</Button>\r\n            <Button onClick={breathHalf} variant=\"warning\">Breath Half</Button>\r\n            <Button onClick={halfToFull} variant=\"warning\">Half To Full</Button>\r\n            <Button onClick={stopFull} variant=\"danger\">Stop Full</Button>\r\n            <Button onClick={stopHalf} variant=\"danger\">Stop Half</Button>\r\n        </Card.Body>\r\n      </Card>\r\n    </Container>\r\n\r\n\r\n    </div>\r\n}\r\n\r\n\r\n","import React from 'react';\r\nimport './App.scss';\r\nimport { HttpClient } from '@butter-robotics/mas-javascript-api';\r\nimport { RobotObject } from './components/RobotObject';\r\nimport { Navbar, Nav, Form, FormControl, Button, Modal, NavDropdown, InputGroup, ButtonGroup, ListGroup } from 'react-bootstrap';\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom';\r\nimport { ScenarioButtons } from './components/ScenariosButtons';\r\nimport { useState } from 'react';\r\n\r\n\r\n\r\nexport type AppState = {\r\n\tdayNightStatus: boolean;\r\n\tNewIPInput: string;\r\n\tcurrentButterClients: HttpClient[];\r\n\tshowInst: boolean;\r\n\tshowNewIP: boolean;\r\n\tlabCurrentIPs: string[];\r\n\tIPdeleteState: boolean[];\r\n}\r\n\r\nexport class App extends React.PureComponent<{}, AppState> {\r\n\r\n\r\n\r\n\tstate: AppState = {\r\n\t\tdayNightStatus: false,\r\n\t\tNewIPInput: '',\r\n\t\tcurrentButterClients: [],\r\n\t\tshowInst: false,\r\n\t\tshowNewIP: false,\r\n\t\tlabCurrentIPs: ['192.168.57.27', '192.168.57.32', '192.168.57.34', '192.168.56.188', '192.168.56.193', '192.168.56.227'],\r\n\t\tIPdeleteState: Array(6).fill(false),\r\n\t}\r\n\r\n\tSetDayNightStatus = () => {\r\n\t\tthis.setState({\r\n\t\t\tdayNightStatus: !this.state.dayNightStatus\r\n\t\t})\r\n\t}\r\n\r\n\tonAddRobotObject = (ip: string) => {\r\n\t\tconst currentButterClient = new HttpClient(ip);\r\n\t\tcurrentButterClient.timeout = 240;\r\n\t\tif (!this.state.currentButterClients.map(c => c.ip).some(c => c === ip)) {\r\n\t\t\tthis.setState({\r\n\t\t\t\tcurrentButterClients: [...this.state.currentButterClients, currentButterClient],\r\n\t\t\t\tshowNewIP: !this.state.showNewIP\r\n\t\t\t})\r\n\t\t}\r\n\t}\r\n\r\n\tonRemoveRobotObject = (ip: string) => {\r\n\t\tthis.setState({\r\n\t\t\tcurrentButterClients: this.state.currentButterClients.filter(butterClient => butterClient.ip !== ip)\r\n\t\t})\r\n\t}\r\n\r\n\tonRemoveRobotIP = (ip: string) => {\r\n\t\tvar array = [...this.state.labCurrentIPs];\r\n\t\tlet StateArray = [...this.state.IPdeleteState];\r\n\t\tvar index = array.indexOf(ip);\r\n\t\tarray.splice(index, 1);\r\n\t\tStateArray.splice(index, 1);\r\n\t\tthis.setState({labCurrentIPs: array});\r\n\t\tthis.setState({IPdeleteState: StateArray});\r\n\t}\r\n\r\n\trenderButtons(ip: string) {\r\n\t\tlet IParray = [...this.state.labCurrentIPs];\r\n\t\tlet StateArray = [...this.state.IPdeleteState];\r\n\t\tlet index = IParray.indexOf(ip);\r\n\t\tif (this.state.IPdeleteState[index]) {\r\n\t\t\tStateArray[index] = false;\r\n\t\t\treturn(\r\n\t\t\t\t<>\r\n\t\t\t\t<Button variant=\"secondary\" disabled>Delete {ip}?</Button>\r\n\t\t\t\t<Button variant=\"outline-danger\" onClick={() => this.setState(() => this.onRemoveRobotIP(ip))}>🗸</Button>\r\n\t\t\t\t<Button variant=\"outline-secondary\" onClick={() => this.setState({IPdeleteState: StateArray})}>✗</Button>\r\n\t\t\t\t</>\r\n\t\t\t);\r\n\t\t}\r\n\t\telse {\r\n\t\t\tStateArray[index] = true;\r\n\t\t\treturn(\r\n\t\t\t\t<>\r\n\t\t\t\t<Button variant=\"secondary\" onClick={() => this.onAddRobotObject(ip)}>Connect to: {ip}</Button>\r\n\t\t\t\t<Button variant=\"outline-danger\" onClick={() => this.setState({IPdeleteState: StateArray})}>🗑</Button>\r\n\t\t\t\t</>\r\n\t\t\t);\r\n\t\t}\r\n\t}\r\n\t\r\n\tonToggleInstructions = () => {\r\n\t\tthis.setState({\r\n\t\t\tshowInst: !this.state.showInst\r\n\t\t})\r\n\t}\r\n\r\n\tonToggleIPadd = () => {\r\n\t\tthis.setState({\r\n\t\t\tshowNewIP: !this.state.showNewIP,\r\n\t\t\tIPdeleteState: this.state.IPdeleteState.fill(false)\r\n\t\t})\r\n\t}\r\n\r\n\tNewIpADDED = () => {\r\n\t\tconst pattern = /^[0-9]+[.][0-9]+[.][0-9]+[.][0-9]+$/g;\r\n\t\tconst result = pattern.test(this.state.NewIPInput);\r\n\t\tlet index = this.state.labCurrentIPs.indexOf(this.state.NewIPInput);\r\n\t\tif (result) {\r\n\t\t\tif (index === -1) {\r\n\t\t\t\tthis.setState({\r\n\t\t\t\t\tlabCurrentIPs: [...this.state.labCurrentIPs, this.state.NewIPInput],\r\n\t\t\t\t\tIPdeleteState: [...this.state.IPdeleteState, false]\r\n\t\t\t\t});\r\n\t\t\t}\r\n\t\t\tthis.setState({\r\n\t\t\t\tNewIPInput: ''\r\n\t\t\t});\r\n\t\t}\r\n\t\telse {\r\n\t\t\talert('Incorrect Input');\r\n\t\t}\r\n\t}\r\n\r\n\thandleChange = (event: { target: { value: any; }; }) => {\r\n\t\tthis.setState({\r\n\t\t\tNewIPInput: event.target.value\r\n\t\t})\r\n\t}\r\n\r\n\thandlePress = (event: { key: string; }) => {\r\n\t\tif (event.key === 'Enter') {\r\n\t\t\tthis.NewIpADDED();\r\n\t\t}\r\n\t}\r\n\r\n\r\n\trenderRobotObjects = () => {\r\n\r\n\t\treturn (\r\n\t\t\t<ul className='robot-objects'>\r\n\t\t\t\t{this.state.currentButterClients.map((butterClient) => <RobotObject key={butterClient.ip} butterClient={butterClient} onRemove={this.onRemoveRobotObject} />)}\r\n\t\t\t</ul>\r\n\t\t);\r\n\t}\r\n\r\n\r\n\trender() {\r\n\r\n\t\tconst { currentButterClients } = this.state;\r\n\r\n\t\treturn (\r\n\t\t\t<Router basename=\"/Multi-Robot-Interface\">\r\n\t\t\t<div>\r\n\t\t\t<Router>\r\n\t\t\t\t\t<Navbar bg=\"dark\" variant=\"dark\">\r\n\t\t\t\t\t\t<Navbar.Brand href=\"/home\">Multi Robot Operator</Navbar.Brand>\r\n\t\t\t\t\t\t<Nav.Link href=\"/home\" style={{ color: '#FFF' }}>Home</Nav.Link>\r\n\t\t\t\t\t\t<NavDropdown title=\"HHRRI\" id=\"basic-nav-dropdown\" style={{ color: '#FFF' }}>\r\n\t\t\t\t\t\t\t<NavDropdown.Item><Link to=\"/HHRRI/In-Group\">In-Group</Link></NavDropdown.Item>\r\n\t\t\t\t\t\t\t<NavDropdown.Divider />\r\n\t\t\t\t\t\t\t<NavDropdown.Item><Link to=\"/HHRRI/Out-Group\">Out-Group</Link></NavDropdown.Item> \r\n\t\t\t\t\t\t</NavDropdown>\r\n\t\t\t\t\t</Navbar>\r\n\r\n\t\t\t\t\t<Navbar collapseOnSelect expand=\"lg\" className='robot-search navbar-collapse' bg=\"dark\" variant=\"dark\">\r\n\t\t\t\t\t<Navbar.Toggle aria-controls=\"responsive-navbar-nav\" />\r\n\t\t\t\t\t\r\n\t\t\t\t\t\t<Form inline>\r\n\t\t\t\t\t\t<Button variant=\"outline-info\" onClick={this.onToggleIPadd}>Connect to a Robot</Button>\r\n\r\n\t\t\t\t\t\t<Modal show={this.state.showNewIP} onHide={this.onToggleIPadd}>\r\n\t\t\t\t\t\t\t<Modal.Header translate=\"true\">\r\n\t\t\t\t\t\t\t\t<Modal.Title>Robots List:</Modal.Title>\r\n\t\t\t\t\t\t\t</Modal.Header>\r\n\t\t\t\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t\t\t\t<ListGroup className='navbar-brand'>\r\n\t\t\t\t\t\t\t\t\t{this.state.labCurrentIPs.map(ip => (\r\n\t\t\t\t\t\t\t\t\t\t<ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t\t\t<ButtonGroup aria-label=\"Basic example\">\r\n\t\t\t\t\t\t\t\t\t\t\t{this.renderButtons(ip)}\r\n\t\t\t\t\t\t    \t\t\t\t</ButtonGroup>\r\n\t\t\t\t\t\t\t\t\t\t</ListGroup.Item>\r\n\t\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t\t</ListGroup>\r\n\t\t\t\t\t\t\t\t<p></p>\r\n\t\t\t\t\t\t\t\t<InputGroup className=\"mb-3\">\r\n    \t\t\t\t\t\t\t\t<FormControl\r\n      \t\t\t\t\t\t\t\t\tplaceholder=\"New Robot's IP\"\r\n      \t\t\t\t\t\t\t\t\taria-label=\"New Robot's IP\"\r\n      \t\t\t\t\t\t\t\t\taria-describedby=\"basic-addon2\"\r\n\t\t\t\t\t\t\t\t\t  \tvalue={this.state.NewIPInput}\r\n\t\t\t\t\t\t\t\t\t  \tonChange={this.handleChange}\r\n\t\t\t\t\t\t\t\t\t\tonKeyPress={this.handlePress}\r\n    \t\t\t\t\t\t\t\t/>\r\n    \t\t\t\t\t\t\t\t<Button variant=\"outline-secondary\" id=\"button-addon2\" onClick={this.NewIpADDED}>Add</Button>\r\n\t\t\t\t\t\t\t\t</InputGroup>\r\n\t\t\t\t\t\t\t</Modal.Body>\r\n\t\t\t\t\t\t\t<Modal.Footer>\r\n\t\t\t\t\t\t\t\t<Button variant=\"secondary\"  onClick={this.onToggleIPadd}>🡆</Button>\r\n\t\t\t\t\t\t\t</Modal.Footer>\r\n\t\t\t\t\t\t</Modal>\r\n\t\t\t\t\t\t\r\n\t\t\t\t\t\t</Form>\r\n\r\n\t\t\t\t\t\t<Navbar.Collapse id=\"responsive-navbar-nav\">\r\n\t\t\t\t\t\t<Nav className=\"ml-auto\" >\r\n\t\t\t\t\t\t\t<Button variant=\"secondary\" onClick={this.onToggleInstructions}>Instructions</Button>\r\n\t\t\t\t\t\t\t<Button className=\"mx-2\" onClick={() => { document.body.classList.toggle('background-night'); this.SetDayNightStatus() }} variant=\"outline-info\">{this.state.dayNightStatus ? 'Bright' : 'Dark'}</Button>\r\n\t\t\t\t\t\t\t\r\n\t\t\t\t\t\t\t<Modal show={this.state.showInst} onHide={this.onToggleInstructions}>\r\n\t\t\t\t\t\t\t\t<Modal.Header translate=\"true\">\r\n\t\t\t\t\t\t\t\t\t<Modal.Title>Manual for the \"Robot-Operator\"</Modal.Title>\r\n\t\t\t\t\t\t\t\t</Modal.Header>\r\n\t\t\t\t\t\t\t\t<Modal.Body>\r\n\t\t\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t\t1. Make sure that your robot in connected to a ButterComposer on some laptop around the lab\r\n\t\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t\t2. Make sure that this computer is connected to milab_idc wifi network (password: milabspirit)\r\n\t\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t\t\t<p>\r\n\t\t\t\t\t\t\t\t\t3. Try to remove and then add the robot card from the screen if there are no available animations buttons apeering on screen\r\n\t\t\t\t\t\t\t\t\t</p>\r\n\t\t\t\t\t\t\t\t\t4. Once you have done steps 1,2,3 - try again!\r\n\r\n\t\t\t\t\t\t\t\t</Modal.Body>\r\n\t\t\t\t\t\t\t\t<Modal.Footer>\r\n\t\t\t\t\t\t\t\t\t<Button variant=\"secondary\" onClick={this.onToggleInstructions}>\r\n\t\t\t\t\t\t\t\t\tI'm ready! go back\r\n\t\t\t\t\t\t\t\t\t</Button>\r\n\t\t\t\t\t\t\t\t</Modal.Footer>\r\n\t\t\t\t\t\t\t</Modal>\r\n\r\n\t\t\t\t\t\t</Nav>\r\n\t\t\t\t\t\t</Navbar.Collapse>\r\n\t\t\t\t\t</Navbar>\r\n\r\n\t\t\t\t\t<Switch>\r\n\t\t\t\t\t\t<Route path=\"/HHRRI/In-Group\">\r\n\t\t\t\t\t\t\t<ScenarioButtons scenario=\"In-Group\" />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t\t<Route path=\"/HHRRI/Out-Group\">\r\n\t\t\t\t\t\t\t<ScenarioButtons scenario=\"Out-Group\" />\r\n\t\t\t\t\t\t</Route>\r\n\t\t\t\t\t</Switch>\r\n\r\n\t\t\t\t\t{currentButterClients !== [] ? this.renderRobotObjects() : <h2>loading..</h2>}\r\n\t\t\t</Router>\r\n\t\t\t</div>\r\n\t\t\t</Router>\r\n\t\t)\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\ntype Config = {\r\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\r\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\r\n};\r\n\r\nexport function register(config?: Config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(\r\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\r\n      window.location.href\r\n    );\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl: string, config?: Config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\nimport { BrowserRouter, Route, Switch } from \"react-router-dom\"\r\n\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}